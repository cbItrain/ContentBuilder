<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import mx.events.PropertyChangeEvent;
			
			import uk.co.itrainconsulting.contentbuilder.control.events.IOErrEvent;
			import uk.co.itrainconsulting.contentbuilder.control.events.SecurityErrEvent;
			import uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.MuteButtonSkin;
			import uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.PauseButtonSkin;
			import uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.PlayButtonSkin;
			import uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.StopButtonSkin;
			import uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.UnMuteButtonSkin;
			
			[Bindable] private var sound:Sound = new Sound();
			[Bindable] private var channel:SoundChannel;
			[Bindable] private var trans:SoundTransform = new SoundTransform();
			[Bindable] private var totalLength:Number = 0;
			public var autoPlay:Boolean = false;
			public var mute:Boolean = false;
			public var loop:Boolean = false;
			
			private var currentPos:Number = 0;
			private var pausePos:Number = 0;
			
			private function runner(e:Event):void{
				if (sound)
					totalLength = sound.length;
				else
					totalLength = 0;
				if (channel)
					currentPos = channel.position;
				if (source != "")
					timeDisplay.text = msToMinutes(currentPos) + " / " + msToMinutes(totalLength);
				else
					timeDisplay.text = "0:00 / 0:00";
			}
			
			private var loopCount:int = 0;
			private function playSound():void{
				if (loop)
				{
					loopCount = 9999;
				} else {
					loopCount = 0;
				}
				if (source != "")
				{
					channel = sound.play(pausePos,loopCount,trans);
					channel.addEventListener(Event.SOUND_COMPLETE, soundComplete);
					isPlaying = true;
				}
			}
			private function soundComplete(e:Event):void{
				stopSound();
			}
			[Bindable]private var isPlaying:Boolean = false;
			[Bindable]private var isMuted:Boolean = false;
			private var request:URLRequest;
			public function initSound():void {
				try {
					currentPos = 0;
					if (sound != null && sound.url != null)
					{
						sound.close();
					}
					//if (sound == null)
					sound = new Sound();
					if (request != null)
						request.url = source;
					else
						request = new URLRequest(source);
					sound.addEventListener(ProgressEvent.PROGRESS, progressHandler);
					sound.addEventListener(IOErrorEvent.NETWORK_ERROR, onIOErrorEvent);
					sound.addEventListener(IOErrorEvent.IO_ERROR, onIOErrorEvent);
					sound.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityErrorEvent);
					sound.load(request);
					pausePos = 0;
					if (mute)
					{
						trans.volume = 0;
						isMuted = true;
					}
					else
						isMuted = false;
				} catch (e:Error) {
					if (e is IOError)
						onIOErrorEvent();
					else if (e is SecurityError)
						onSecurityErrorEvent();
				}
			}
			
			private function onIOErrorEvent(e:IOErrorEvent = null):void {
				dispatchEvent(new IOErrEvent(IOErrEvent.IO_ERR,true));
			}
			
			private function onSecurityErrorEvent(e:SecurityErrorEvent = null):void {
				dispatchEvent(new SecurityErrEvent(SecurityErrEvent.SECURITY_ERR, true));
			}
			
			public function addedToStage():void{
				muteSound(mute);
				if (autoPlay)
				{
					playSound();
				} else {
					isPlaying = false;
				}
			}
			private function muteSound(v:Boolean):void{
				if (v)
				{
					trans.volume = 0;
					if (channel)
					{
						channel.soundTransform = trans;
						
					}
					isMuted = true;
				} else {
					trans.volume = 1;
					if (channel)
						channel.soundTransform = trans;
					isMuted = false;
				}
			}
			
			private var _source:String = "";
			public function set source(val:String):void{
				_source = val;
				stopSound();
				if (val != "" && val != null)
					initSound();
			}
			public function get source():String{
				return _source;
			}
			
			
			private function pauseSound():void{
				if (source != "")
				{
					pausePos = channel.position;
					channel.stop();
					isPlaying = false;
				}
			}
			public function stopSound():void{
				if (source != "" && source != null && isPlaying)
				{
					pausePos = 0;
					currentPos = 0;
					channel.stop();
					channel = sound.play(0,loopCount,trans);
					channel.stop();
					isPlaying = false;
				}
			}
			public function killSound():void{
				pausePos = 0;
				currentPos = 0;
				if (sound){
					try{
						sound.close();
					} catch(e:Error){
						
					}
				}
				if (channel != null)
				{
					channel.stop();
					channel = sound.play(0,loopCount,trans);
					channel.stop();
					sound = null;
					channel = null;
				}
				isPlaying = false;
			}
			
			private function progressHandler(event:ProgressEvent):void {
				sound.removeEventListener(ProgressEvent.PROGRESS, progressHandler);
				addEventListener(Event.ENTER_FRAME, runner);
			}
			
			private function msToMinutes(val:Number):String{
				var minutes:Number = Math.floor(val / 1000 / 60);
				var seconds:Number = Math.floor(val / 1000) % 60;
				return minutes + ":" + ["0",""][Number(seconds >= 10)] + seconds;
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect radiusX="9" radiusY="9" height="100%" width="100%" >
		<s:fill> 
			<s:LinearGradient rotation="90"> 
				<s:entries>  
					<s:GradientEntry ratio="0" alpha="0.5" color="#000000"/>
					<s:GradientEntry ratio="1" alpha="0.5" color="#000000"/>
				</s:entries> 
			</s:LinearGradient> 
		</s:fill> 
	</s:Rect>
	<s:HGroup height="100%" width="100%" paddingBottom="4" paddingTop="4" paddingLeft="10" paddingRight="10" gap="0" verticalAlign="middle">
		<mx:Spacer width="100%" />
		<s:Button id="playBTN" visible="{!isPlaying}" includeInLayout="{!isPlaying}" label="Play" click="playSound()" skinClass="uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.PlayButtonSkin" />
		<s:Button id="pauseBTN" visible="{isPlaying}" includeInLayout="{isPlaying}" label="Pause" click="pauseSound()" skinClass="uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.PauseButtonSkin" />
		<s:Button id="stopBTN" label="Stop" click="stopSound()" skinClass="uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.StopButtonSkin" />
		<mx:Spacer width="10" />
		<s:Label paddingTop="3" color="0xffffff" id="timeDisplay" text="0:00 / 0:00" />
		<mx:Spacer width="10" />
		<s:Button id="muteBTN" visible="{!isMuted}" includeInLayout="{!isMuted}" label="Mute" click="muteSound(true)" skinClass="uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.MuteButtonSkin" />
		<s:Button id="unMuteBTN" visible="{isMuted}" includeInLayout="{isMuted}" label="Unmute" click="muteSound(false)" skinClass="uk.co.itrainconsulting.contentbuilder.view.skins.audioandvideo.UnMuteButtonSkin" />
		<mx:Spacer width="100%" />
	</s:HGroup>
</s:Group>
