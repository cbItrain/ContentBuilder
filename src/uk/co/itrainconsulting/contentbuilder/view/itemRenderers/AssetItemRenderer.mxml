<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				autoDrawBackground="true"
				initialize="onInitialize()"
				xmlns:bc="uk.co.itrainconsulting.contentbuilder.view.baseComponents.*">
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			
			import uk.co.itrainconsulting.common.events.ImageRepositoryEvent;
			import uk.co.itrainconsulting.common.events.LocalImageLoaderEvent;
			import uk.co.itrainconsulting.common.utils.Embeded;
			import uk.co.itrainconsulting.common.utils.ImageRepository;
			import uk.co.itrainconsulting.common.utils.LocalImageLoader;
			import uk.co.itrainconsulting.contentbuilder.model.AssetObject;
			import uk.co.itrainconsulting.contentbuilder.model.Constants;
			import uk.co.itrainconsulting.common.model.EnumObjectType;
			import uk.co.itrainconsulting.contentbuilder.model.fileupload.FileReferenceWrapper;
			import uk.co.itrainconsulting.contentbuilder.model.fileupload.events.FileUploadEvent;
			import uk.co.itrainconsulting.contentbuilder.utils.AssetUtils;


			private static const _repository:ImageRepository = ImageRepository.getInstance();
			private static const _localLoader:LocalImageLoader = LocalImageLoader.getInstance();

			private var _assetObject:AssetObject
			
			private function onInitialize():void {
				imgPreview.addEventListener(ImageRepositoryEvent.IMAGE_UPDATED, onImageUpdated);
				imgPreview.addEventListener(LocalImageLoaderEvent.IMAGE_LOADED, onImageUpdated);
			}
			
			private function onImageUpdated(e:Event = null):void
			{
				loader.visible=loader.includeInLayout=false;
				imgPreview.visible = true;
			}

			override public function set data(value:Object):void
			{
				super.data=value;
				removeEventListenerFromFRW(); 
				_assetObject = value as AssetObject;
				updateImage();
			}
			
			private function updateImage():void {
				if (_assetObject)
				{
					loader.visible=loader.includeInLayout=false;
					btnRemove.visible=btnRemove.includeInLayout=false;
					imgPreview.visible = true;
					if (_assetObject.type.equals(EnumObjectType.AUDIO))
					{
						imgPreview.source=Embeded.AUDIO_IMAGE;
					}
					else if (_assetObject.type.equals(EnumObjectType.VIDEO))
					{
						imgPreview.source=Embeded.VIDEO_IMAGE;
					}
					if (_assetObject.fileReferenceW)
					{
						if (_assetObject.type.equals(EnumObjectType.IMAGE))
						{
							if (_assetObject.fileReferenceW.dataAsByteArray)
							{
								_localLoader.loadLocal(_assetObject.fileReferenceW.dataAsByteArray, imgPreview);
							}
							else
								_assetObject.fileReferenceW.addEventListener(FileUploadEvent.LOADING_COMPLETE, onImageLoadComplete);
						}
						btnRemove.visible=btnRemove.includeInLayout=true;
					}
					else if (_assetObject.type.equals(EnumObjectType.IMAGE))
					{
						imgPreview.visible = false;
						loader.visible=loader.includeInLayout=true;
						var bd:BitmapData = _repository.imageData(_assetObject.url, false, imgPreview);
						if (bd) {
							imgPreview.source = new Bitmap(bd, PixelSnapping.AUTO, true);
							loader.visible = false;
							imgPreview.visible = true;
						}
					}
				}
			}
			
			private function removeEventListenerFromFRW():void {
				if (_assetObject && _assetObject.fileReferenceW)
					_assetObject.fileReferenceW.removeEventListener(FileUploadEvent.LOADING_COMPLETE, onImageLoadComplete);
					
			}

			private function onImageLoadComplete(e:FileUploadEvent):void
			{
				if (e.target == _assetObject.fileReferenceW) {
					_localLoader.loadLocal(_assetObject.fileReferenceW.dataAsByteArray, imgPreview);
				}
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	<s:Rect left="3"
			right="3"
			top="3"
			bottom="3">

		<s:fill>
			<s:SolidColor color="0x000000"
						  color.selected="0x2E97E5"
						  alpha="0.3"
						  alpha.hovered="0.5"
						  alpha.selected="0.9"/>
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0x000000"
								color.hovered="0x2E97E5"
								color.selected="0x2E97E5"
								alpha="0.1"
								alpha.hovered="1"
								alpha.selected="1"
								weight="2"/>
		</s:stroke>
	</s:Rect>
	<s:VGroup left="5"
			  right="5"
			  top="5"
			  bottom="5">
		<s:Group width="90"
				 height="90">
			<s:HGroup width="100%"
					  height="100%"
					  id="loader">
				<!-- loader graphic -->
				<mx:Spacer width="100%"/>
				<s:VGroup width="100%"
						  height="100%">
					<mx:Spacer height="100%"/>
					<mx:SWFLoader id="loaderGraphic"
								  source="{ImageRepository.loaderSpinner}"
								  width="80"
								  height="80"/>
					<mx:Spacer height="100%"/>
				</s:VGroup>
				<mx:Spacer width="100%"/>
			</s:HGroup>
			<s:VGroup width="90"
					  height="90"
					  horizontalAlign="center"
					  verticalAlign="middle"
					  paddingBottom="3"
					  paddingLeft="3"
					  paddingRight="3"
					  paddingTop="3"
					  gap="0">
				<mx:Image id="imgPreview"
						  verticalAlign="middle"
						  horizontalAlign="center"
						  minHeight="1"
						  minWidth="1"
						  maxHeight="80"
						  maxWidth="80"/>
			</s:VGroup>
		</s:Group>
		<s:Group width="90"
				 id="labelContainer">
			<s:Rect left="0"
					right="0"
					top="0"
					bottom="0">
				<s:fill>
					<s:SolidColor color="0xffffff"
								  alpha="1"/>
				</s:fill>
			</s:Rect>
			<s:Label color="0x000000"
					 text="{data.name}"
					 maxDisplayedLines="1"
					 width="100%"
					 bottom="0"
					 paddingLeft="3"
					 paddingRight="3"
					 paddingTop="5"
					 paddingBottom="3"/>
		</s:Group>
	</s:VGroup>
	<bc:SlideListButton id="btnRemove"
						icon="@Embed('assets/icons/trash.png')"
						toolTip="Remove from Upload List"
						right="7"
						top="7"/>
</s:ItemRenderer>
